import asyncio
import re
from datetime import datetime

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

from data.hse_data import hse_programs
from data.supabase_db import save_snils, get_snils, get_user_position, is_data_stale
from keyboards import reply_keyboards
from parsers.excel_parser import process_with_timeout

router = Router()


class UserState(StatesGroup):
    waiting_for_snils = State()
    waiting_for_university = State()


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    snils = await get_snils(message.from_user.id)
    if snils:
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –í–£–ó:', reply_markup=reply_keyboards.universities)
        await state.set_state(UserState.waiting_for_university)
        await state.update_data(snils=snils)
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —Å–µ–±—è –≤ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö –ø–æ –°–ù–ò–õ–°. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –°–ù–ò–õ–°:')
        await state.set_state(UserState.waiting_for_snils)


@router.message(UserState.waiting_for_snils)
async def process_snils(message: Message, state: FSMContext):
    if re.match(r'^\d{3}-\d{3}-\d{3} \d{2}$', message.text):
        await save_snils(message.from_user.id, message.text)
        await state.update_data(snils=message.text)
        await message.answer('–°–ù–ò–õ–° —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –í–£–ó:', reply_markup=reply_keyboards.universities)
        await state.set_state(UserState.waiting_for_university)
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –°–ù–ò–õ–°. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123-456-789 00):')


def capitalize_city(city_name):
    if city_name.lower() == "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥":
        return "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥"
    elif city_name.lower == "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥":
        return "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    else:
        return city_name.capitalize()


@router.message(UserState.waiting_for_university)
async def process_university(message: Message, state: FSMContext):
    if message.text.lower() == '–≤—à—ç':
        user_data = await state.get_data()
        snils = user_data['snils']
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ù–ò–õ–°: {snils}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cached_results = await get_user_position(snils)
        if cached_results:
            await message.answer('<b>–í–∞—à –°–ù–ò–õ–° –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö:</b>\n', parse_mode='HTML')
            data_stale = False
            for result in cached_results:
                if is_data_stale(result['last_updated']):
                    data_stale = True
                last_updated = datetime.fromisoformat(result['last_updated']).strftime('%d.%m %H:%M')
                city_name = capitalize_city(result['city'])
                response = (
                    f"<b>–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {last_updated}.</b>\n"
                    f" \n"
                    f"<b><u>{city_name}</u></b>, <b>{result['program']}</b>\n"
                    f"üîπ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: <b>{result['position']}</b>\n"
                    f"üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª: {'<b>–î–∞</b>' if result['original_document'] else '<b>–ù–µ—Ç</b>'}"
                )

                await message.answer(response, parse_mode='HTML')

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            if data_stale:
                await message.answer(
                    '–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')
                await asyncio.create_task(update_and_notify_user(message, snils))
        else:
            await message.answer(
                '–í–∞—à –°–ù–ò–õ–° –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...')
            await asyncio.create_task(update_and_notify_user(message, snils))

        await state.clear()
    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –í–®–≠.')


async def update_and_notify_user(message: Message, snils: str):
    cities = list(hse_programs.keys())
    results = await process_with_timeout(cities, hse_programs, snils, timeout=60)

    if results:
        await message.answer('–í–∞—à –°–ù–ò–õ–° –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):\n')
        for r in results:
            last_updated = datetime.fromisoformat(result['last_updated']).strftime('%d.%m %H:%M')
            city_name = capitalize_city(result['city'])
            response = (
                f"<b>–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {last_updated}.</b>\n"
                f" \n"
                f"<b><u>{city_name}</u></b>, <b>{result['program']}</b>\n"
                f"üîπ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: <b>{result['position']}</b>\n"
                f"üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª: {'<b>–î–∞</b>' if result['original_document'] else '<b>–ù–µ—Ç</b>'}"
            )
            await message.answer(response, parse_mode='HTML')
    else:
        await message.answer('–í–∞—à –°–ù–ò–õ–° –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –í–®–≠ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.')
